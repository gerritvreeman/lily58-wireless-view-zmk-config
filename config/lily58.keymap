/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        c_n_to_down: c_n_to_down {
            compatible = "zmk,behavior-mod-morph";
            label = "C_N_TO_DOWN";
            bindings = <&kp N>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_p_to_up: c_p_to_up {
            compatible = "zmk,behavior-mod-morph";
            label = "C_P_TO_UP";
            bindings = <&kp P>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_f_to_right: c_f_to_right {
            compatible = "zmk,behavior-mod-morph";
            label = "C_F_TO_RIGHT";
            bindings = <&kp F>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_b_to_left: c_b_to_left {
            compatible = "zmk,behavior-mod-morph";
            label = "C_B_TO_LEFT";
            bindings = <&kp B>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_h_to_bspc: c_h_to_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "C_H_TO_BSPC";
            bindings = <&kp H>, <&kp BSPC>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_d_to_del: c_d_to_del {
            compatible = "zmk,behavior-mod-morph";
            label = "C_D_TO_DEL";
            bindings = <&kp D>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_a_to_gui_left: c_a_to_gui_left {
            compatible = "zmk,behavior-mod-morph";
            label = "C_A_TO_GUI_LEFT";
            bindings = <&kp A>, <&kp LG(LEFT)>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_e_to_gui_right: c_e_to_gui_right {
            compatible = "zmk,behavior-mod-morph";
            label = "C_A_TO_GUI_RIGHT";
            bindings = <&kp E>, <&kp LG(RIGHT)>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_lbkt_to_esc: c_lbkt_to_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "C_LBKT_TO_ESC";
            bindings = <&kp LBKT>, <&kp ESC>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_i_to_tab: c_i_to_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "C_I_TO_TAB";
            bindings = <&kp I>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_m_to_ret: c_m_to_ret {
            compatible = "zmk,behavior-mod-morph";
            label = "C_M_TO_RET";
            bindings = <&kp M>, <&kp RET>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        c_j_to_lshft_ret: c_j_to_lshft_ret {
            compatible = "zmk,behavior-mod-morph";
            label = "C_M_TO_LSHFT_RET";
            bindings = <&kp J>, <&kp LS(RET)>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp ESC    &kp N1            &kp N2  &kp N3              &kp N4         &kp N5                                    &kp N6        &kp N7             &kp N8         &kp N9   &kp N0      &kp MINUS
&kp TAB    &kp Q             &kp W   &c_e_to_gui_right   &kp R          &kp T                                     &kp Y         &kp U              &c_i_to_tab    &kp O    &c_p_to_up  &kp EQUAL
&kp LCTRL  &c_a_to_gui_left  &kp S   &c_d_to_del         &c_f_to_right  &kp G                                     &c_h_to_bspc  &c_j_to_lshft_ret  &kp K          &kp L    &kp SEMI    &kp SQT
&kp LSHFT  &kp Z             &kp X   &kp C               &kp V          &c_b_to_left  &c_lbkt_to_esc    &kp RBKT  &c_n_to_down  &c_m_to_ret        &kp COMMA      &kp DOT  &kp FSLH    &kp RSHFT
                                     &kp LEFT_ALT        &kp LEFT_GUI   &mo 2         &kp SPACE         &kp SPACE &mo 1         &kp RIGHT_GUI      &kp RIGHT_ALT
            >;
        };

        lower_layer {
            display-name = "Lower";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans           &trans    &trans    &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans     &trans     &trans           &trans    &trans    &trans
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;
        };

/*         raise_layer { */
/*             display-name = "Raise"; */
/*             bindings = < */
/* &trans &trans &kp F10  &kp F11  &kp F12  &trans                     &trans     &trans      &trans       &trans     &trans           &trans */
/* &trans &trans &kp F7   &kp F8   &kp F9   &trans                     &mkp MB4   &kp KP_N7   &kp KP_N8    &kp KP_N9  &kp KP_DIVIDE    &trans */
/* &trans &trans &kp F4   &kp F5   &kp F6   &trans                     &mkp MB3   &kp KP_N4   &kp KP_N5    &kp KP_N6  &kp KP_MULTIPLY  &trans */
/* &trans &trans &kp F1   &kp F2   &kp F3   &trans  &trans    &mkp MB1 &mkp MB2   &kp KP_N1   &kp KP_N2    &kp KP_N3  &kp KP_MINUS     &trans */
/*                        &trans   &trans   &trans  &trans    &trans   &kp KP_N0  &kp KP_DOT  &kp KP_PLUS */
/*             >; */
/*         }; */

        raise_layer {
            display-name = "Raise";
            bindings = <
&trans &trans &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans                     &trans     &trans      &trans       &trans     &trans           &trans
&trans &trans &kp C_PREV  &kp C_PP      &kp C_NEXT    &trans                     &mkp MB4   &kp KP_N7   &kp KP_N8    &kp KP_N9  &kp KP_DIVIDE    &trans
&trans &trans &kp F4      &kp F5        &kp F6        &trans                     &mkp MB3   &kp KP_N4   &kp KP_N5    &kp KP_N6  &kp KP_MULTIPLY  &trans
&trans &trans &kp F1      &kp F2        &kp F3        &trans  &trans    &mkp MB1 &mkp MB2   &kp KP_N1   &kp KP_N2    &kp KP_N3  &kp KP_MINUS     &trans
                          &trans        &trans        &trans  &trans    &trans   &kp KP_N0  &kp KP_DOT  &kp KP_PLUS
            >;
        };

        extra_1 { status = "reserved"; };

        extra_2 { status = "reserved"; };

        extra_3 { status = "reserved"; };
    };
};
