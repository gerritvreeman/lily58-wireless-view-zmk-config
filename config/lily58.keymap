/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/* 0	1	2	3	4	5			6	7	8	9	10	11 */
/* 12	13	14	15	16	17			18	19	20	21	22	23 */
/* 24	25	26	27	28	29			30	31	32	33	34	35 */
/* 36	37	38	39	40	41	42	43	44	45	46	47	48	49 */
/* 			50	51	52	53	54	55	56	57 */

#define LH_KEYS <  0  1  2  3  4  5 \
                  12 13 14 15 16 17 \
                  24 25 26 27 28 29 \
                  36 37 38 39 40 41 42 \
                           50 51 52 53 >

#define RH_KEYS <     6  7  8  9 10 11 \
                     18 19 20 21 22 23 \
                     30 31 32 33 34 35 \
                  43 44 45 46 47 48 49 \
                  54 55 56 57 >

/* ───── home-row macros ───── */
/* #define HM_A    &hml LSFT &c_a_to_gui_left */
#define HM_A    &hml LSFT A
#define HM_S    &hml LCTL S
/* #define HM_D    &hml LALT &c_d_to_del */
#define HM_D    &hml LALT D
/* #define HM_F    &hml LGUI &c_f_to_right */
#define HM_F    &hml LGUI F

/* #define HM_J    &hmr RGUI &c_j_to_lshft_ret */
#define HM_J    &hmr RGUI J
#define HM_K    &hmr RALT K
#define HM_L    &hmr RCTL L
#define HM_SEMI &hmr RSFT SEMI

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hml: home_row_mod_left {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "balanced";
          require-prior-idle-ms = <150>;
          tapping-term-ms       = <280>;
          quick-tap-ms          = <175>;
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = RH_KEYS;
          hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "balanced";
          require-prior-idle-ms = <150>;
          tapping-term-ms       = <280>;
          quick-tap-ms          = <175>;
          bindings = <&kp>, <&kp>;
          hold-trigger-key-positions = LH_KEYS;
          hold-trigger-on-release;
        };
        c_n_to_down: c_n_to_down {
            compatible = "zmk,behavior-mod-morph";
            label = "C_N_TO_DOWN";
            bindings = <&kp N>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_p_to_up: c_p_to_up {
            compatible = "zmk,behavior-mod-morph";
            label = "C_P_TO_UP";
            bindings = <&kp P>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_f_to_right: c_f_to_right {
            compatible = "zmk,behavior-mod-morph";
            label = "C_F_TO_RIGHT";
            bindings = <&kp F>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_b_to_left: c_b_to_left {
            compatible = "zmk,behavior-mod-morph";
            label = "C_B_TO_LEFT";
            bindings = <&kp B>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_h_to_bspc: c_h_to_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "C_H_TO_BSPC";
            bindings = <&kp H>, <&kp BSPC>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_d_to_del: c_d_to_del {
            compatible = "zmk,behavior-mod-morph";
            label = "C_D_TO_DEL";
            bindings = <&kp D>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_a_to_gui_left: c_a_to_gui_left {
            compatible = "zmk,behavior-mod-morph";
            label = "C_A_TO_GUI_LEFT";
            bindings = <&kp A>, <&kp LG(LEFT)>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_e_to_gui_right: c_e_to_gui_right {
            compatible = "zmk,behavior-mod-morph";
            label = "C_A_TO_GUI_RIGHT";
            bindings = <&kp E>, <&kp LG(RIGHT)>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_lbkt_to_esc: c_lbkt_to_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "C_LBKT_TO_ESC";
            bindings = <&kp LBKT>, <&kp ESC>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_i_to_tab: c_i_to_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "C_I_TO_TAB";
            bindings = <&kp I>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_m_to_ret: c_m_to_ret {
            compatible = "zmk,behavior-mod-morph";
            label = "C_M_TO_RET";
            bindings = <&kp M>, <&kp RET>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
        c_j_to_lshft_ret: c_j_to_lshft_ret {
            compatible = "zmk,behavior-mod-morph";
            label = "C_J_TO_LSHFT_RET";
            bindings = <&kp J>, <&kp LS(RET)>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3   &kp N4  &kp N5                         &kp N6   &kp N7     &kp N8   &kp N9    &kp N0   &kp MINUS
&kp TAB  &kp Q   &kp W   &kp E    &kp R   &kp T                          &kp Y    &kp U      &kp I    &kp O     &kp P    &kp EQUAL
&trans   HM_A    HM_S    HM_D     HM_F    &kp G                          &kp H    HM_J       HM_K     HM_L      HM_SEMI  &kp SQT
&trans   &kp Z   &kp X   &kp C    &kp V   &kp B    &kp LBKT   &kp RBKT   &kp N    &kp COMMA  &kp DOT  &kp FSLH  &trans
                         &kp BSPC &mo 2   &kp RET  &kp SPACE  &kp SPACE  &kp RET  &mo 1      &kp DEL
            >;
        };
/*         default_layer { */
/*             display-name = "Base"; */
/*             bindings = < */
/* &kp ESC  &kp N1  &kp N2  &kp N3             &kp N4  &kp N5                                   &kp N6        &kp N7       &kp N8         &kp N9   &kp N0      &kp MINUS */
/* &kp TAB  &kp Q   &kp W   &c_e_to_gui_right  &kp R   &kp T                                    &kp Y         &kp U        &c_i_to_tab    &kp O    &c_p_to_up  &kp EQUAL */
/* &trans   HM_A    HM_S    HM_D               HM_F    &kp G                                    &c_h_to_bspc  HM_J         HM_K           HM_L     HM_SEMI     &kp SQT */
/* &trans   &kp Z   &kp X   &kp C              &kp V   &c_b_to_left  &c_lbkt_to_esc  &kp RBKT   &c_n_to_down  &c_m_to_ret  &kp COMMA      &kp DOT  &kp FSLH    &trans */
/*                          &kp BSPC           &mo 2   &kp RET       &kp SPACE       &kp SPACE  &kp RET       &mo 1        &kp DEL */
/*             >; */
/*         }; */
        symbol_layer {
            display-name = "Symbols";
            bindings = <
&trans     &trans    &trans  &trans    &trans      &trans                     &trans     &trans    &trans    &trans    &trans    &trans
&trans     &trans    &trans  &trans    &trans      &trans                     &trans     &trans    &trans    &kp LBKT  &kp RBKT  &trans
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PRCNT                  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &kp MINUS
&trans     &trans    &trans  &trans    &trans      &trans     &trans  &trans  &trans     &trans    &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
                             &trans    &trans      &trans     &trans  &trans  &trans     &trans    &trans
            >;
        };
        number_layer {
            display-name = "Numbers";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
/*         raise_layer { */
/*             display-name = "Raise"; */
/*             bindings = < */
/* &trans &trans &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans                     &trans     &trans      &trans       &trans     &trans           &trans */
/* &trans &trans &kp C_PREV  &kp C_PP      &kp C_NEXT    &trans                     &mkp MB4   &kp KP_N7   &kp KP_N8    &kp KP_N9  &kp KP_DIVIDE    &trans */
/* &trans &trans &kp F4      &kp F5        &kp F6        &trans                     &mkp MB3   &kp KP_N4   &kp KP_N5    &kp KP_N6  &kp KP_MULTIPLY  &trans */
/* &trans &trans &kp F1      &kp F2        &kp F3        &trans  &trans    &mkp MB1 &mkp MB2   &kp KP_N1   &kp KP_N2    &kp KP_N3  &kp KP_MINUS     &trans */
/*                           &trans        &trans        &trans  &trans    &trans   &kp KP_N0  &kp KP_DOT  &kp KP_PLUS */
/*             >; */
/*         }; */
/*         test_layer { */
/*             display-name = "Base"; */
/*             bindings = < */
/* &kp ESC    &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                        &kp N6  &kp N7    &kp N8     &kp N9   &kp N0    &kp MINUS */
/* &kp TAB    &kp Q   &kp W   &kp E     &kp R     &kp T                         &kp Y   &kp U     &kp I      &kp O    &kp P     &kp EQUAL */
/* &kp LCTRL  &kp A   &kp S   &kp D     &kp F     &kp G                         &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kp SQT */
/* &kp LSHFT  &kp Z   &kp X   &kp C     &kp V     &kp B   &kp LBKT   &kp RBKT   &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT */
/*                            &kp LALT  &kp LGUI  &mo 2   &kp SPACE  &kp RET    &mo 1   &kp RGUI  &kp RALT */
/*             >; */
/*         }; */
/*         blank_layer { */
/*             display-name = "Blank"; */
/*             bindings = < */
/* &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans */
/* &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans */
/* &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans */
/* &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans */
/*                         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans */
/*             >; */
/*         }; */

        extra_1 { status = "reserved"; };

        extra_2 { status = "reserved"; };

        extra_3 { status = "reserved"; };
    };
};
